/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AppLeagueService } from "../appLeague.service";
import { AppLeagueCreateInput } from "./AppLeagueCreateInput";
import { AppLeagueWhereInput } from "./AppLeagueWhereInput";
import { AppLeagueWhereUniqueInput } from "./AppLeagueWhereUniqueInput";
import { AppLeagueFindManyArgs } from "./AppLeagueFindManyArgs";
import { AppLeagueUpdateInput } from "./AppLeagueUpdateInput";
import { AppLeague } from "./AppLeague";
import { AppRoundFindManyArgs } from "../../appRound/base/AppRoundFindManyArgs";
import { AppRound } from "../../appRound/base/AppRound";
import { AppRoundWhereUniqueInput } from "../../appRound/base/AppRoundWhereUniqueInput";
import { RoundFindManyArgs } from "../../round/base/RoundFindManyArgs";
import { Round } from "../../round/base/Round";
import { RoundWhereUniqueInput } from "../../round/base/RoundWhereUniqueInput";

export class AppLeagueGrpcControllerBase {
  constructor(protected readonly service: AppLeagueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AppLeague })
  @GrpcMethod("AppLeagueService", "createAppLeague")
  async createAppLeague(
    @common.Body() data: AppLeagueCreateInput
  ): Promise<AppLeague> {
    return await this.service.createAppLeague({
      data: data,
      select: {
        createdAt: true,
        id: true,
        isSelected: true,
        joinCode: true,
        leagueCode: true,
        leagueName: true,
        members: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AppLeague] })
  @ApiNestedQuery(AppLeagueFindManyArgs)
  @GrpcMethod("AppLeagueService", "appLeagues")
  async appLeagues(@common.Req() request: Request): Promise<AppLeague[]> {
    const args = plainToClass(AppLeagueFindManyArgs, request.query);
    return this.service.appLeagues({
      ...args,
      select: {
        createdAt: true,
        id: true,
        isSelected: true,
        joinCode: true,
        leagueCode: true,
        leagueName: true,
        members: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AppLeague })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AppLeagueService", "appLeague")
  async appLeague(
    @common.Param() params: AppLeagueWhereUniqueInput
  ): Promise<AppLeague | null> {
    const result = await this.service.appLeague({
      where: params,
      select: {
        createdAt: true,
        id: true,
        isSelected: true,
        joinCode: true,
        leagueCode: true,
        leagueName: true,
        members: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AppLeague })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AppLeagueService", "updateAppLeague")
  async updateAppLeague(
    @common.Param() params: AppLeagueWhereUniqueInput,
    @common.Body() data: AppLeagueUpdateInput
  ): Promise<AppLeague | null> {
    try {
      return await this.service.updateAppLeague({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          isSelected: true,
          joinCode: true,
          leagueCode: true,
          leagueName: true,
          members: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AppLeague })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AppLeagueService", "deleteAppLeague")
  async deleteAppLeague(
    @common.Param() params: AppLeagueWhereUniqueInput
  ): Promise<AppLeague | null> {
    try {
      return await this.service.deleteAppLeague({
        where: params,
        select: {
          createdAt: true,
          id: true,
          isSelected: true,
          joinCode: true,
          leagueCode: true,
          leagueName: true,
          members: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appRounds")
  @ApiNestedQuery(AppRoundFindManyArgs)
  @GrpcMethod("AppLeagueService", "findManyAppRounds")
  async findManyAppRounds(
    @common.Req() request: Request,
    @common.Param() params: AppLeagueWhereUniqueInput
  ): Promise<AppRound[]> {
    const query = plainToClass(AppRoundFindManyArgs, request.query);
    const results = await this.service.findAppRounds(params.id, {
      ...query,
      select: {
        appLeague: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isFinished: true,
        roundNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appRounds")
  @GrpcMethod("AppLeagueService", "connectAppRounds")
  async connectAppRounds(
    @common.Param() params: AppLeagueWhereUniqueInput,
    @common.Body() body: AppRoundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appRounds: {
        connect: body,
      },
    };
    await this.service.updateAppLeague({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appRounds")
  @GrpcMethod("AppLeagueService", "updateAppRounds")
  async updateAppRounds(
    @common.Param() params: AppLeagueWhereUniqueInput,
    @common.Body() body: AppRoundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appRounds: {
        set: body,
      },
    };
    await this.service.updateAppLeague({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appRounds")
  @GrpcMethod("AppLeagueService", "disconnectAppRounds")
  async disconnectAppRounds(
    @common.Param() params: AppLeagueWhereUniqueInput,
    @common.Body() body: AppRoundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appRounds: {
        disconnect: body,
      },
    };
    await this.service.updateAppLeague({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rounds")
  @ApiNestedQuery(RoundFindManyArgs)
  @GrpcMethod("AppLeagueService", "findManyRounds")
  async findManyRounds(
    @common.Req() request: Request,
    @common.Param() params: AppLeagueWhereUniqueInput
  ): Promise<Round[]> {
    const query = plainToClass(RoundFindManyArgs, request.query);
    const results = await this.service.findRounds(params.id, {
      ...query,
      select: {
        appLeague: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rounds")
  @GrpcMethod("AppLeagueService", "connectRounds")
  async connectRounds(
    @common.Param() params: AppLeagueWhereUniqueInput,
    @common.Body() body: RoundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rounds: {
        connect: body,
      },
    };
    await this.service.updateAppLeague({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rounds")
  @GrpcMethod("AppLeagueService", "updateRounds")
  async updateRounds(
    @common.Param() params: AppLeagueWhereUniqueInput,
    @common.Body() body: RoundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rounds: {
        set: body,
      },
    };
    await this.service.updateAppLeague({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rounds")
  @GrpcMethod("AppLeagueService", "disconnectRounds")
  async disconnectRounds(
    @common.Param() params: AppLeagueWhereUniqueInput,
    @common.Body() body: RoundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rounds: {
        disconnect: body,
      },
    };
    await this.service.updateAppLeague({
      where: params,
      data,
      select: { id: true },
    });
  }
}
