/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AppLeague } from "./AppLeague";
import { AppLeagueCountArgs } from "./AppLeagueCountArgs";
import { AppLeagueFindManyArgs } from "./AppLeagueFindManyArgs";
import { AppLeagueFindUniqueArgs } from "./AppLeagueFindUniqueArgs";
import { CreateAppLeagueArgs } from "./CreateAppLeagueArgs";
import { UpdateAppLeagueArgs } from "./UpdateAppLeagueArgs";
import { DeleteAppLeagueArgs } from "./DeleteAppLeagueArgs";
import { AppRoundFindManyArgs } from "../../appRound/base/AppRoundFindManyArgs";
import { AppRound } from "../../appRound/base/AppRound";
import { RoundFindManyArgs } from "../../round/base/RoundFindManyArgs";
import { Round } from "../../round/base/Round";
import { AppLeagueService } from "../appLeague.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AppLeague)
export class AppLeagueResolverBase {
  constructor(
    protected readonly service: AppLeagueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AppLeague",
    action: "read",
    possession: "any",
  })
  async _appLeaguesMeta(
    @graphql.Args() args: AppLeagueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AppLeague])
  @nestAccessControl.UseRoles({
    resource: "AppLeague",
    action: "read",
    possession: "any",
  })
  async appLeagues(
    @graphql.Args() args: AppLeagueFindManyArgs
  ): Promise<AppLeague[]> {
    return this.service.appLeagues(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AppLeague, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AppLeague",
    action: "read",
    possession: "own",
  })
  async appLeague(
    @graphql.Args() args: AppLeagueFindUniqueArgs
  ): Promise<AppLeague | null> {
    const result = await this.service.appLeague(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppLeague)
  @nestAccessControl.UseRoles({
    resource: "AppLeague",
    action: "create",
    possession: "any",
  })
  async createAppLeague(
    @graphql.Args() args: CreateAppLeagueArgs
  ): Promise<AppLeague> {
    return await this.service.createAppLeague({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppLeague)
  @nestAccessControl.UseRoles({
    resource: "AppLeague",
    action: "update",
    possession: "any",
  })
  async updateAppLeague(
    @graphql.Args() args: UpdateAppLeagueArgs
  ): Promise<AppLeague | null> {
    try {
      return await this.service.updateAppLeague({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppLeague)
  @nestAccessControl.UseRoles({
    resource: "AppLeague",
    action: "delete",
    possession: "any",
  })
  async deleteAppLeague(
    @graphql.Args() args: DeleteAppLeagueArgs
  ): Promise<AppLeague | null> {
    try {
      return await this.service.deleteAppLeague(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AppRound], { name: "appRounds" })
  @nestAccessControl.UseRoles({
    resource: "AppRound",
    action: "read",
    possession: "any",
  })
  async findAppRounds(
    @graphql.Parent() parent: AppLeague,
    @graphql.Args() args: AppRoundFindManyArgs
  ): Promise<AppRound[]> {
    const results = await this.service.findAppRounds(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Round], { name: "rounds" })
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "read",
    possession: "any",
  })
  async findRounds(
    @graphql.Parent() parent: AppLeague,
    @graphql.Args() args: RoundFindManyArgs
  ): Promise<Round[]> {
    const results = await this.service.findRounds(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
