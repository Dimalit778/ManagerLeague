/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AppLeague as PrismaAppLeague,
  AppRound as PrismaAppRound,
  Round as PrismaRound,
} from "@prisma/client";

import { AppUserDto } from "../../appUser/AppUserDto";

export class AppLeagueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AppLeagueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.appLeague.count(args);
  }

  async appLeagues<T extends Prisma.AppLeagueFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppLeagueFindManyArgs>
  ): Promise<PrismaAppLeague[]> {
    return this.prisma.appLeague.findMany<Prisma.AppLeagueFindManyArgs>(args);
  }
  async appLeague<T extends Prisma.AppLeagueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppLeagueFindUniqueArgs>
  ): Promise<PrismaAppLeague | null> {
    return this.prisma.appLeague.findUnique(args);
  }
  async createAppLeague<T extends Prisma.AppLeagueCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppLeagueCreateArgs>
  ): Promise<PrismaAppLeague> {
    return this.prisma.appLeague.create<T>(args);
  }
  async updateAppLeague<T extends Prisma.AppLeagueUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppLeagueUpdateArgs>
  ): Promise<PrismaAppLeague> {
    return this.prisma.appLeague.update<T>(args);
  }
  async deleteAppLeague<T extends Prisma.AppLeagueDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppLeagueDeleteArgs>
  ): Promise<PrismaAppLeague> {
    return this.prisma.appLeague.delete(args);
  }

  async findAppRounds(
    parentId: string,
    args: Prisma.AppRoundFindManyArgs
  ): Promise<PrismaAppRound[]> {
    return this.prisma.appLeague
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appRounds(args);
  }

  async findRounds(
    parentId: string,
    args: Prisma.RoundFindManyArgs
  ): Promise<PrismaRound[]> {
    return this.prisma.appLeague
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rounds(args);
  }
  async GetAllUsersInLeague(args: string): Promise<AppUserDto[]> {
    throw new Error("Not implemented");
  }
  async GetUsersInLeague(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
