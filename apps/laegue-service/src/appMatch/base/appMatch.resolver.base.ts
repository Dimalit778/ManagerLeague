/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AppMatch } from "./AppMatch";
import { AppMatchCountArgs } from "./AppMatchCountArgs";
import { AppMatchFindManyArgs } from "./AppMatchFindManyArgs";
import { AppMatchFindUniqueArgs } from "./AppMatchFindUniqueArgs";
import { CreateAppMatchArgs } from "./CreateAppMatchArgs";
import { UpdateAppMatchArgs } from "./UpdateAppMatchArgs";
import { DeleteAppMatchArgs } from "./DeleteAppMatchArgs";
import { AppRound } from "../../appRound/base/AppRound";
import { AppMatchDto } from "../AppMatchDto";
import { AppMatchService } from "../appMatch.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AppMatch)
export class AppMatchResolverBase {
  constructor(
    protected readonly service: AppMatchService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AppMatch",
    action: "read",
    possession: "any",
  })
  async _appMatchesMeta(
    @graphql.Args() args: AppMatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AppMatch])
  @nestAccessControl.UseRoles({
    resource: "AppMatch",
    action: "read",
    possession: "any",
  })
  async appMatches(
    @graphql.Args() args: AppMatchFindManyArgs
  ): Promise<AppMatch[]> {
    return this.service.appMatches(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AppMatch, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AppMatch",
    action: "read",
    possession: "own",
  })
  async appMatch(
    @graphql.Args() args: AppMatchFindUniqueArgs
  ): Promise<AppMatch | null> {
    const result = await this.service.appMatch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppMatch)
  @nestAccessControl.UseRoles({
    resource: "AppMatch",
    action: "create",
    possession: "any",
  })
  async createAppMatch(
    @graphql.Args() args: CreateAppMatchArgs
  ): Promise<AppMatch> {
    return await this.service.createAppMatch({
      ...args,
      data: {
        ...args.data,

        appRound: args.data.appRound
          ? {
              connect: args.data.appRound,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppMatch)
  @nestAccessControl.UseRoles({
    resource: "AppMatch",
    action: "update",
    possession: "any",
  })
  async updateAppMatch(
    @graphql.Args() args: UpdateAppMatchArgs
  ): Promise<AppMatch | null> {
    try {
      return await this.service.updateAppMatch({
        ...args,
        data: {
          ...args.data,

          appRound: args.data.appRound
            ? {
                connect: args.data.appRound,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppMatch)
  @nestAccessControl.UseRoles({
    resource: "AppMatch",
    action: "delete",
    possession: "any",
  })
  async deleteAppMatch(
    @graphql.Args() args: DeleteAppMatchArgs
  ): Promise<AppMatch | null> {
    try {
      return await this.service.deleteAppMatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppRound, {
    nullable: true,
    name: "appRound",
  })
  @nestAccessControl.UseRoles({
    resource: "AppRound",
    action: "read",
    possession: "any",
  })
  async getAppRound(
    @graphql.Parent() parent: AppMatch
  ): Promise<AppRound | null> {
    const result = await this.service.getAppRound(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => [AppMatchDto])
  async GetAllMatchesInRound(
    @graphql.Args()
    args: string
  ): Promise<AppMatchDto[]> {
    return this.service.GetAllMatchesInRound(args);
  }

  @graphql.Query(() => String)
  async GetMatchesInRound(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetMatchesInRound(args);
  }
}
