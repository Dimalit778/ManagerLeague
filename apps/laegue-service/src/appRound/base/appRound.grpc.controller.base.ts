/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AppRoundService } from "../appRound.service";
import { AppRoundCreateInput } from "./AppRoundCreateInput";
import { AppRoundWhereInput } from "./AppRoundWhereInput";
import { AppRoundWhereUniqueInput } from "./AppRoundWhereUniqueInput";
import { AppRoundFindManyArgs } from "./AppRoundFindManyArgs";
import { AppRoundUpdateInput } from "./AppRoundUpdateInput";
import { AppRound } from "./AppRound";
import { AppMatchFindManyArgs } from "../../appMatch/base/AppMatchFindManyArgs";
import { AppMatch } from "../../appMatch/base/AppMatch";
import { AppMatchWhereUniqueInput } from "../../appMatch/base/AppMatchWhereUniqueInput";
import { MatchFindManyArgs } from "../../match/base/MatchFindManyArgs";
import { Match } from "../../match/base/Match";
import { MatchWhereUniqueInput } from "../../match/base/MatchWhereUniqueInput";

export class AppRoundGrpcControllerBase {
  constructor(protected readonly service: AppRoundService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AppRound })
  @GrpcMethod("AppRoundService", "createAppRound")
  async createAppRound(
    @common.Body() data: AppRoundCreateInput
  ): Promise<AppRound> {
    return await this.service.createAppRound({
      data: {
        ...data,

        appLeague: data.appLeague
          ? {
              connect: data.appLeague,
            }
          : undefined,
      },
      select: {
        appLeague: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isFinished: true,
        roundNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AppRound] })
  @ApiNestedQuery(AppRoundFindManyArgs)
  @GrpcMethod("AppRoundService", "appRounds")
  async appRounds(@common.Req() request: Request): Promise<AppRound[]> {
    const args = plainToClass(AppRoundFindManyArgs, request.query);
    return this.service.appRounds({
      ...args,
      select: {
        appLeague: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isFinished: true,
        roundNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AppRound })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AppRoundService", "appRound")
  async appRound(
    @common.Param() params: AppRoundWhereUniqueInput
  ): Promise<AppRound | null> {
    const result = await this.service.appRound({
      where: params,
      select: {
        appLeague: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isFinished: true,
        roundNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AppRound })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AppRoundService", "updateAppRound")
  async updateAppRound(
    @common.Param() params: AppRoundWhereUniqueInput,
    @common.Body() data: AppRoundUpdateInput
  ): Promise<AppRound | null> {
    try {
      return await this.service.updateAppRound({
        where: params,
        data: {
          ...data,

          appLeague: data.appLeague
            ? {
                connect: data.appLeague,
              }
            : undefined,
        },
        select: {
          appLeague: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          isFinished: true,
          roundNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AppRound })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AppRoundService", "deleteAppRound")
  async deleteAppRound(
    @common.Param() params: AppRoundWhereUniqueInput
  ): Promise<AppRound | null> {
    try {
      return await this.service.deleteAppRound({
        where: params,
        select: {
          appLeague: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          isFinished: true,
          roundNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appMatches")
  @ApiNestedQuery(AppMatchFindManyArgs)
  @GrpcMethod("AppRoundService", "findManyAppMatches")
  async findManyAppMatches(
    @common.Req() request: Request,
    @common.Param() params: AppRoundWhereUniqueInput
  ): Promise<AppMatch[]> {
    const query = plainToClass(AppMatchFindManyArgs, request.query);
    const results = await this.service.findAppMatches(params.id, {
      ...query,
      select: {
        appRound: {
          select: {
            id: true,
          },
        },

        awayScore: true,
        createdAt: true,
        homeScore: true,
        id: true,
        isFinished: true,
        matchPoints: true,
        result: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appMatches")
  @GrpcMethod("AppRoundService", "connectAppMatches")
  async connectAppMatches(
    @common.Param() params: AppRoundWhereUniqueInput,
    @common.Body() body: AppMatchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appMatches: {
        connect: body,
      },
    };
    await this.service.updateAppRound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appMatches")
  @GrpcMethod("AppRoundService", "updateAppMatches")
  async updateAppMatches(
    @common.Param() params: AppRoundWhereUniqueInput,
    @common.Body() body: AppMatchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appMatches: {
        set: body,
      },
    };
    await this.service.updateAppRound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appMatches")
  @GrpcMethod("AppRoundService", "disconnectAppMatches")
  async disconnectAppMatches(
    @common.Param() params: AppRoundWhereUniqueInput,
    @common.Body() body: AppMatchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appMatches: {
        disconnect: body,
      },
    };
    await this.service.updateAppRound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/matches")
  @ApiNestedQuery(MatchFindManyArgs)
  @GrpcMethod("AppRoundService", "findManyMatches")
  async findManyMatches(
    @common.Req() request: Request,
    @common.Param() params: AppRoundWhereUniqueInput
  ): Promise<Match[]> {
    const query = plainToClass(MatchFindManyArgs, request.query);
    const results = await this.service.findMatches(params.id, {
      ...query,
      select: {
        appRound: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/matches")
  @GrpcMethod("AppRoundService", "connectMatches")
  async connectMatches(
    @common.Param() params: AppRoundWhereUniqueInput,
    @common.Body() body: MatchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      matches: {
        connect: body,
      },
    };
    await this.service.updateAppRound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/matches")
  @GrpcMethod("AppRoundService", "updateMatches")
  async updateMatches(
    @common.Param() params: AppRoundWhereUniqueInput,
    @common.Body() body: MatchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      matches: {
        set: body,
      },
    };
    await this.service.updateAppRound({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/matches")
  @GrpcMethod("AppRoundService", "disconnectMatches")
  async disconnectMatches(
    @common.Param() params: AppRoundWhereUniqueInput,
    @common.Body() body: MatchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      matches: {
        disconnect: body,
      },
    };
    await this.service.updateAppRound({
      where: params,
      data,
      select: { id: true },
    });
  }
}
