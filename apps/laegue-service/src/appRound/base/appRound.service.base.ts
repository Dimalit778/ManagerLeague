/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AppRound as PrismaAppRound,
  AppMatch as PrismaAppMatch,
  Match as PrismaMatch,
  AppLeague as PrismaAppLeague,
} from "@prisma/client";

import { AppRoundDto } from "../AppRoundDto";

export class AppRoundServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AppRoundCountArgs, "select">): Promise<number> {
    return this.prisma.appRound.count(args);
  }

  async appRounds<T extends Prisma.AppRoundFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppRoundFindManyArgs>
  ): Promise<PrismaAppRound[]> {
    return this.prisma.appRound.findMany<Prisma.AppRoundFindManyArgs>(args);
  }
  async appRound<T extends Prisma.AppRoundFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppRoundFindUniqueArgs>
  ): Promise<PrismaAppRound | null> {
    return this.prisma.appRound.findUnique(args);
  }
  async createAppRound<T extends Prisma.AppRoundCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppRoundCreateArgs>
  ): Promise<PrismaAppRound> {
    return this.prisma.appRound.create<T>(args);
  }
  async updateAppRound<T extends Prisma.AppRoundUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppRoundUpdateArgs>
  ): Promise<PrismaAppRound> {
    return this.prisma.appRound.update<T>(args);
  }
  async deleteAppRound<T extends Prisma.AppRoundDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppRoundDeleteArgs>
  ): Promise<PrismaAppRound> {
    return this.prisma.appRound.delete(args);
  }

  async findAppMatches(
    parentId: string,
    args: Prisma.AppMatchFindManyArgs
  ): Promise<PrismaAppMatch[]> {
    return this.prisma.appRound
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appMatches(args);
  }

  async findMatches(
    parentId: string,
    args: Prisma.MatchFindManyArgs
  ): Promise<PrismaMatch[]> {
    return this.prisma.appRound
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .matches(args);
  }

  async getAppLeague(parentId: string): Promise<PrismaAppLeague | null> {
    return this.prisma.appRound
      .findUnique({
        where: { id: parentId },
      })
      .appLeague();
  }
  async GetAllRoundsInLeague(args: string): Promise<AppRoundDto[]> {
    throw new Error("Not implemented");
  }
  async GetRoundsInLeague(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
