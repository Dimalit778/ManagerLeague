/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AppUserService } from "../appUser.service";
import { AppUserCreateInput } from "./AppUserCreateInput";
import { AppUserWhereInput } from "./AppUserWhereInput";
import { AppUserWhereUniqueInput } from "./AppUserWhereUniqueInput";
import { AppUserFindManyArgs } from "./AppUserFindManyArgs";
import { AppUserUpdateInput } from "./AppUserUpdateInput";
import { AppUser } from "./AppUser";
import { LeagueFindManyArgs } from "../../league/base/LeagueFindManyArgs";
import { League } from "../../league/base/League";
import { LeagueWhereUniqueInput } from "../../league/base/LeagueWhereUniqueInput";

export class AppUserGrpcControllerBase {
  constructor(protected readonly service: AppUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AppUser })
  @GrpcMethod("AppUserService", "createAppUser")
  async createAppUser(
    @common.Body() data: AppUserCreateInput
  ): Promise<AppUser> {
    return await this.service.createAppUser({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        profileImage: true,
        totalPoint: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AppUser] })
  @ApiNestedQuery(AppUserFindManyArgs)
  @GrpcMethod("AppUserService", "appUsers")
  async appUsers(@common.Req() request: Request): Promise<AppUser[]> {
    const args = plainToClass(AppUserFindManyArgs, request.query);
    return this.service.appUsers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        profileImage: true,
        totalPoint: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AppUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AppUserService", "appUser")
  async appUser(
    @common.Param() params: AppUserWhereUniqueInput
  ): Promise<AppUser | null> {
    const result = await this.service.appUser({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        profileImage: true,
        totalPoint: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AppUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AppUserService", "updateAppUser")
  async updateAppUser(
    @common.Param() params: AppUserWhereUniqueInput,
    @common.Body() data: AppUserUpdateInput
  ): Promise<AppUser | null> {
    try {
      return await this.service.updateAppUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          profileImage: true,
          totalPoint: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AppUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AppUserService", "deleteAppUser")
  async deleteAppUser(
    @common.Param() params: AppUserWhereUniqueInput
  ): Promise<AppUser | null> {
    try {
      return await this.service.deleteAppUser({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          profileImage: true,
          totalPoint: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/leagues")
  @ApiNestedQuery(LeagueFindManyArgs)
  @GrpcMethod("AppUserService", "findManyLeagues")
  async findManyLeagues(
    @common.Req() request: Request,
    @common.Param() params: AppUserWhereUniqueInput
  ): Promise<League[]> {
    const query = plainToClass(LeagueFindManyArgs, request.query);
    const results = await this.service.findLeagues(params.id, {
      ...query,
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leagues")
  @GrpcMethod("AppUserService", "connectLeagues")
  async connectLeagues(
    @common.Param() params: AppUserWhereUniqueInput,
    @common.Body() body: LeagueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leagues: {
        connect: body,
      },
    };
    await this.service.updateAppUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leagues")
  @GrpcMethod("AppUserService", "updateLeagues")
  async updateLeagues(
    @common.Param() params: AppUserWhereUniqueInput,
    @common.Body() body: LeagueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leagues: {
        set: body,
      },
    };
    await this.service.updateAppUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leagues")
  @GrpcMethod("AppUserService", "disconnectLeagues")
  async disconnectLeagues(
    @common.Param() params: AppUserWhereUniqueInput,
    @common.Body() body: LeagueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leagues: {
        disconnect: body,
      },
    };
    await this.service.updateAppUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
