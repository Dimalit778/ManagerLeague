/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { LeagueService } from "../league.service";
import { LeagueCreateInput } from "./LeagueCreateInput";
import { LeagueWhereInput } from "./LeagueWhereInput";
import { LeagueWhereUniqueInput } from "./LeagueWhereUniqueInput";
import { LeagueFindManyArgs } from "./LeagueFindManyArgs";
import { LeagueUpdateInput } from "./LeagueUpdateInput";
import { League } from "./League";

export class LeagueGrpcControllerBase {
  constructor(protected readonly service: LeagueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: League })
  @GrpcMethod("LeagueService", "createLeague")
  async createLeague(@common.Body() data: LeagueCreateInput): Promise<League> {
    return await this.service.createLeague({
      data: {
        ...data,

        appUser: data.appUser
          ? {
              connect: data.appUser,
            }
          : undefined,
      },
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [League] })
  @ApiNestedQuery(LeagueFindManyArgs)
  @GrpcMethod("LeagueService", "leagues")
  async leagues(@common.Req() request: Request): Promise<League[]> {
    const args = plainToClass(LeagueFindManyArgs, request.query);
    return this.service.leagues({
      ...args,
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: League })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LeagueService", "league")
  async league(
    @common.Param() params: LeagueWhereUniqueInput
  ): Promise<League | null> {
    const result = await this.service.league({
      where: params,
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: League })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LeagueService", "updateLeague")
  async updateLeague(
    @common.Param() params: LeagueWhereUniqueInput,
    @common.Body() data: LeagueUpdateInput
  ): Promise<League | null> {
    try {
      return await this.service.updateLeague({
        where: params,
        data: {
          ...data,

          appUser: data.appUser
            ? {
                connect: data.appUser,
              }
            : undefined,
        },
        select: {
          appUser: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: League })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LeagueService", "deleteLeague")
  async deleteLeague(
    @common.Param() params: LeagueWhereUniqueInput
  ): Promise<League | null> {
    try {
      return await this.service.deleteLeague({
        where: params,
        select: {
          appUser: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
