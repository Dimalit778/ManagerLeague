/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { RoundService } from "../round.service";
import { RoundCreateInput } from "./RoundCreateInput";
import { RoundWhereInput } from "./RoundWhereInput";
import { RoundWhereUniqueInput } from "./RoundWhereUniqueInput";
import { RoundFindManyArgs } from "./RoundFindManyArgs";
import { RoundUpdateInput } from "./RoundUpdateInput";
import { Round } from "./Round";

export class RoundGrpcControllerBase {
  constructor(protected readonly service: RoundService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Round })
  @GrpcMethod("RoundService", "createRound")
  async createRound(@common.Body() data: RoundCreateInput): Promise<Round> {
    return await this.service.createRound({
      data: {
        ...data,

        appLeague: data.appLeague
          ? {
              connect: data.appLeague,
            }
          : undefined,
      },
      select: {
        appLeague: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Round] })
  @ApiNestedQuery(RoundFindManyArgs)
  @GrpcMethod("RoundService", "rounds")
  async rounds(@common.Req() request: Request): Promise<Round[]> {
    const args = plainToClass(RoundFindManyArgs, request.query);
    return this.service.rounds({
      ...args,
      select: {
        appLeague: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Round })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RoundService", "round")
  async round(
    @common.Param() params: RoundWhereUniqueInput
  ): Promise<Round | null> {
    const result = await this.service.round({
      where: params,
      select: {
        appLeague: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Round })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RoundService", "updateRound")
  async updateRound(
    @common.Param() params: RoundWhereUniqueInput,
    @common.Body() data: RoundUpdateInput
  ): Promise<Round | null> {
    try {
      return await this.service.updateRound({
        where: params,
        data: {
          ...data,

          appLeague: data.appLeague
            ? {
                connect: data.appLeague,
              }
            : undefined,
        },
        select: {
          appLeague: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Round })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RoundService", "deleteRound")
  async deleteRound(
    @common.Param() params: RoundWhereUniqueInput
  ): Promise<Round | null> {
    try {
      return await this.service.deleteRound({
        where: params,
        select: {
          appLeague: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
