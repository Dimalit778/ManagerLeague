/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Round as PrismaRound,
  AppLeague as PrismaAppLeague,
} from "@prisma/client";

export class RoundServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RoundCountArgs, "select">): Promise<number> {
    return this.prisma.round.count(args);
  }

  async rounds<T extends Prisma.RoundFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoundFindManyArgs>
  ): Promise<PrismaRound[]> {
    return this.prisma.round.findMany<Prisma.RoundFindManyArgs>(args);
  }
  async round<T extends Prisma.RoundFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoundFindUniqueArgs>
  ): Promise<PrismaRound | null> {
    return this.prisma.round.findUnique(args);
  }
  async createRound<T extends Prisma.RoundCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoundCreateArgs>
  ): Promise<PrismaRound> {
    return this.prisma.round.create<T>(args);
  }
  async updateRound<T extends Prisma.RoundUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoundUpdateArgs>
  ): Promise<PrismaRound> {
    return this.prisma.round.update<T>(args);
  }
  async deleteRound<T extends Prisma.RoundDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RoundDeleteArgs>
  ): Promise<PrismaRound> {
    return this.prisma.round.delete(args);
  }

  async getAppLeague(parentId: string): Promise<PrismaAppLeague | null> {
    return this.prisma.round
      .findUnique({
        where: { id: parentId },
      })
      .appLeague();
  }
}
