/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, League as PrismaLeague } from "@prisma/client";

export class LeagueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LeagueCountArgs, "select">): Promise<number> {
    return this.prisma.league.count(args);
  }

  async leagues<T extends Prisma.LeagueFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeagueFindManyArgs>
  ): Promise<PrismaLeague[]> {
    return this.prisma.league.findMany<Prisma.LeagueFindManyArgs>(args);
  }
  async league<T extends Prisma.LeagueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeagueFindUniqueArgs>
  ): Promise<PrismaLeague | null> {
    return this.prisma.league.findUnique(args);
  }
  async createLeague<T extends Prisma.LeagueCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeagueCreateArgs>
  ): Promise<PrismaLeague> {
    return this.prisma.league.create<T>(args);
  }
  async updateLeague<T extends Prisma.LeagueUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeagueUpdateArgs>
  ): Promise<PrismaLeague> {
    return this.prisma.league.update<T>(args);
  }
  async deleteLeague<T extends Prisma.LeagueDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeagueDeleteArgs>
  ): Promise<PrismaLeague> {
    return this.prisma.league.delete(args);
  }
}
